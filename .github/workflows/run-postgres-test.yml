# This workflow will:
# - Set up a Postgres service container
# - Push some data into a Postgres database
# - Run a test that confirms that the data is in the database


name: Run Postgres test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  Test:

    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:15.1
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        # These options are eeded because the postgres container does not provide a healthcheck.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Create and start virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install "pytest<8"
        pip install -r requirements.txt

    - name: Test with pytest
      env:
        DB_HOST: ${{ env.POSTGRES_HOST }}
        DB_USER: ${{ env.POSTGRES_USER }}
        DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        DB_NAME: ${{ env.POSTGRES_DB }}
        DB_PORT: ${{ env.POSTGRES_PORT }}
      run: |
        pytest tests/db/test_1.py
